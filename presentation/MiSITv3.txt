# MiSIT (Modified Simon Interference Task)
# ----------------------------------------------------------------------
#
# required files:
#     input\pilot_input.txt    # events file
#     stim1 PNGs in the stimuli\ folder
#         green-SENW.png, green-SWNE.png
#         blue-SENW.png, blue-SWNE.png
#         pink-SENW.png, pink-SWNE.png
#         violet-SENW.png, violet-SWNE.png
#     stim2 PNGs in the stimuli\ folder
#         01_green-SENW_farbe-left.png, 02_green-SENW_linie-left.png
#         03_green-SWNE_farbe-right.png, 04_green-SWNE_linie-left.png
#         05_blue-SENW_farbe-left.png, 06_blue-SENW_linie-left.png
#         07_blue-SWNE_farbe-right.png, 08_blue-SWNE_linie-left.png
#         09_pink-SENW_farbe-left.png, 10_pink-SENW_linie-right.png
#         11_pink-SWNE_farbe-right.png, 12_pink-SWNE_linie-right.png
#         13_violet-SENW_farbe-left.png, 14_violet-SENW_linie-right.png
#         15_violet-SWNE_farbe-right.png, 16_violet-SWNE_direction-right.png
#
# version 0.3 - 2016, Laura Waite
########################################################################

response_matching = simple_matching;
active_buttons = 2;

begin;

#
# Stimulus Pairs
#
array {
    bitmap {filename = "green-SENW.png"; description = "green-SENW";} green_SENW;
    bitmap {filename = "01_green-SENW_farbe-left.png"; description = "01_green-SENW_farbe-left";} farbe_left;
} green_SENW_farbe_left;

array {
    bitmap {filename = "green-SENW.png"; description = "green-SENW";};
    bitmap {filename = "02_green-SENW_linie-left.png"; description = "02_green-SENW_linie-left";};
} green_SENW_linie_left;

array {
    bitmap {filename = "green-SWNE.png"; description = "green-SWNE";};
    bitmap {filename = "03_green-SWNE_farbe-right.png"; description = "03_green-SWNE_farbe-right";};
} green_SWNE_farbe_right;

array {
    bitmap {filename = "green-SWNE.png"; description = "green-SWNE";};
    bitmap {filename = "04_green-SWNE_linie-left.png"; description = "04_green-SWNE_linie-left";};
} green_SWNE_linie_left;

array {
    bitmap {filename = "blue-SENW.png"; description = "blue-SENW";};
    bitmap {filename = "05_blue-SENW_farbe-left.png"; description = "05_blue-SENW_farbe-left";};
} blue_SENW_farbe_left;

array {
    bitmap {filename = "blue-SENW.png"; description = "blue-SENW";};
    bitmap {filename = "06_blue-SENW_linie-left.png"; description = "06_blue-SENW_linie-left";};
} blue_SENW_linie_left;

array {
    bitmap {filename = "blue-SWNE.png"; description = "blue-SWNE";};
    bitmap {filename = "07_blue-SWNE_farbe-right.png"; description = "07_blue-SWNE_farbe-right";};
} blue_SWNE_farbe_right;

array {
    bitmap {filename = "blue-SWNE.png"; description = "blue-SWNE";};
    bitmap {filename = "08_blue-SWNE_linie-left.png"; description = "08_blue-SWNE_linie-left";};
} blue_SWNE_linie_left;

array {
    bitmap {filename = "pink-SENW.png"; description = "pink-SENW";};
    bitmap {filename = "09_pink-SENW_farbe-left.png"; description = "09_pink-SENW_farbe-left";};
} pink_SENW_farbe_left;

array {
    bitmap {filename = "pink-SENW.png"; description = "pink-SENW";};
    bitmap {filename = "10_pink-SENW_linie-right.png"; description = "10_pink-SENW_linie-right";};
} pink_SENW_linie_right;

array {
    bitmap {filename = "pink-SWNE.png"; description = "pink-SWNE";};
    bitmap {filename = "11_pink-SWNE_farbe-right.png"; description = "11_pink-SWNE_farbe-right";};
} pink_SWNE_farbe_right;

array {
    bitmap {filename = "pink-SWNE.png"; description = "pink-SWNE";};
    bitmap {filename = "12_pink-SWNE_linie-right.png"; description = "12_pink-SWNE_linie-right";};
} pink_SWNE_linie_right;

array {
    bitmap {filename = "violet-SENW.png"; description = "violet-SENW";};
    bitmap {filename = "13_violet-SENW_farbe-left.png"; description = "13_violet-SENW_farbe-left";};
} violet_SENW_farbe_left;

array {
    bitmap {filename = "violet-SENW.png"; description = "violet-SENW";};
    bitmap {filename = "14_violet-SENW_linie-right.png"; description = "14_violet-SENW_linie-right";};
} violet_SENW_linie_right;

array {
    bitmap {filename = "violet-SWNE.png"; description = "violet-SWNE";};
    bitmap {filename = "15_violet-SWNE_farbe-right.png"; description = "15_violet-SWNE_farbe-right";};
} violet_SWNE_farbe_right;

array {
    bitmap {filename = "violet-SWNE.png"; description = "violet-SWNE";};
    bitmap {filename = "16_violet-SWNE_linie-right.png"; description = "16_violet-SWNE_linie-right";};
} violet_SWNE_linie_right;

#
# legend
#
bitmap {filename = "gbw_pve.png";} gbw_pve;

#
# pause
#
trial {
    trial_duration = forever;
    trial_type = first_response;
    picture {
        text {caption = "Pause"; font_size = 48;};
        x=0; y=0;
    };
} pause;

#
# finish
#
trial {
    trial_duration = forever;
    trial_type = first_response;
    picture {
        text {caption = "Vielen Dank!"; font_size = 48;};
        x=0; y=0;
    };
} finish;

#
# main trial
#
trial {
    trial_type = first_response;
    all_responses = false;

    stimulus_event {
        picture {
            bitmap green_SENW; x=0; y=0;
            bitmap gbw_pve; x=-0; y=-400;
        } stim1;
        time = 0;
        code = "stim1";
    } stim_event1;

    stimulus_event {
        picture {
            bitmap farbe_left; x=0; y=0;
            bitmap gbw_pve; x=0; y=-400;
        } stim2;
        duration = 1000;
        code = "stim2";
        response_active = true;
    } stim_event2;
} main_trial;

#
# PCL
#
begin_pcl;

#
# load stimuli pair arrays into a single array
#
array<bitmap> avail_stims[16][0];
avail_stims[1].assign(green_SENW_farbe_left);
avail_stims[2].assign(green_SENW_linie_left);
avail_stims[3].assign(green_SWNE_farbe_right);
avail_stims[4].assign(green_SWNE_linie_left);
avail_stims[5].assign(blue_SENW_farbe_left);
avail_stims[6].assign(blue_SENW_linie_left);
avail_stims[7].assign(blue_SWNE_farbe_right);
avail_stims[8].assign(blue_SWNE_linie_left);
avail_stims[9].assign(pink_SENW_farbe_left);
avail_stims[10].assign(pink_SENW_linie_right);
avail_stims[11].assign(pink_SWNE_farbe_right);
avail_stims[12].assign(pink_SWNE_linie_right);
avail_stims[13].assign(violet_SENW_farbe_left);
avail_stims[14].assign(violet_SENW_linie_right);
avail_stims[15].assign(violet_SWNE_farbe_right);
avail_stims[16].assign(violet_SWNE_linie_right);

#
# read input file
#
preset string version;
string eventfile = "input\\input_" + version + ".txt";
input_file events = new input_file;
events.open(eventfile);

array<int> event_num[1000];
array<int> stimuli[1000];    # avail_stims array number
array<int> jitter[1000];
array<string> block_type[1000];
array<string> color[1000];
array<string> direction[1000];
array<string> relevant_feature[1000];
array<string> congruency[1000];
array<string> answer[1000];
array<string> rules[1000];
array<int> total_trials[0];

loop int i=1 until events.end_of_file()
begin
    event_num[i] = events.get_int();              # used only for input file
    stimuli[i] = events.get_int();
    color[i] = events.get_string();               # used only for output file
    direction[i] = events.get_string();           # used only for output file
    relevant_feature[i] = events.get_string();    # used only for output file
    congruency[i] = events.get_string();          # used only for output file
    answer[i] = events.get_string();              # used only for output file
    jitter[i] = events.get_int();
    block_type[i] = events.get_string();
    rules[i] = events.get_string();
    total_trials.add(i);
    i=i+1;
end;
events.close();

#
# Set-up output file
#
string fdouble = "%10.3f";  # output format double
string fint = "%8d";        # output format int

string subject = logfile.filename();
output_file data = new output_file;
data.open(subject + ".txt");
# (headers) rules  trial  block_type  stim1  onset_stim1  stim2  onset_stim2  response  answer  reaction_time  color  relevant_feature  direction  congruency
data.print("rules\ttrial\tblock_type\tstim1\tonset_stim1\tstim2\tonset_stim2\tresponse\tanswer\treaction_time\tcolort\relevant_feature\tdirection\tcongruency\n");

#
# Main
#
loop int i=1 until i > total_trials.count()
begin
    # pause between blocks
    if (i != 1) then # but don't pause before the first trial
        if (block_type[i] != block_type[i-1]) then
            pause.present();
        end;
    end;

    # set event code for stim1
    stim_event1.set_event_code(avail_stims[stimuli[i]][1].description());
    # set picture part for stim1
    stim1.set_part(1, avail_stims[stimuli[i]][1]);

    # set event code for stim2
    stim_event2.set_event_code(avail_stims[stimuli[i]][2].description());
    # set picture part for stim2
    stim2.set_part(1, avail_stims[stimuli[i]][2]);
    # set jitter before stim2 onset
    stim_event2.set_time(jitter[i]);

    main_trial.present();

    # pull stimulus data for stim1
    stimulus_data timing_stim1 = stimulus_manager.get_stimulus_data((i*2)-1);

    # pull stimulus data for stim2
    stimulus_data info_stim2 = stimulus_manager.get_stimulus_data(i*2);

    # print to output file
    data.print(printf(total_trials[i], fint) + "\t");
    data.print(rules[i] + "\t");
    data.print(printf(i, fint) + "\t");
    data.print(block_type[i] + "\t");
    data.print(stim_event1.event_code() + "\t");
    data.print(printf(timing_stim1.time(), fint) + "\t");   # stim1 onset
    data.print(stim_event2.event_code() + "\t");
    data.print(printf(info_stim2.time(), fint) + "\t");     # stim2 onset
    if (info_stim2.button() == 1) then
        data.print("left" + "\t");
    elseif (info_stim2.button() == 2) then
        data.print("right" + "\t");
    elseif (info_stim2.button() == 0) then
        data.print("none" + "\t");
    end;
    data.print(answer[i] + "\t");
    data.print(printf(info_stim2.reaction_time(), fint) + "\t");    # reaction time
    data.print(color[i] + "\t");
    data.print(relevant_feature[i] + "\t");
    data.print(direction[i] + "\t");
    data.print(congruency[i] + "\t");
    data.print( "\n" );

    i=i+1;
end;

data.close(); # close output file
finish.present();