# COIN (Color Orientation INterference Task)
# --------------------------------------------------------------------------
#
# required files:
#     COIN.pcl
#     events files in the input\ folder
#         gbNW_poNE_1.txt, gbNW_poNE_2.txt
#         poNW_gbNE_1.txt, poNW_gbNE_2.txt
#     stim1 PNGs in the stimuli\ folder
#         green-SENW-330.png, green-SWNE-030.png
#         green-SENW-300.png, green-SWNE-060.png
#         blue-SENW-330.png, blue-SWNE-030.png
#         blue-SENW-300.png, blue-SWNE-060.png
#         pink-SENW-330.png, pink-SWNE-030.png
#         pink-SENW-300.png, pink-SWNE-060.png
#         orange-SENW-330.png, orange-SWNE-030.png
#         orange-SENW-300.png, orange-SWNE-060.png
#     stim2 PNGs in the stimuli\ folder
#         01_green-SENW-330_farbe.png
#         02_green-SENW-330_orient.png
#         03_green-SENW-300_farbe.png
#         04_green-SENW-300_orient.png
#         05_green-SWNE-030_farbe.png
#         06_green-SWNE-030_orient.png
#         07_green-SWNE-060_farbe.png
#         08_green-SWNE-060_orient.png
#         09_blue-SENW-330_farbe.png
#         10_blue-SENW-330_orient.png
#         11_blue-SENW-300_farbe.png
#         12_blue-SENW-300_orient.png
#         13_blue-SWNE-030_farbe.png
#         14_blue-SWNE-030_orient.png
#         15_blue-SWNE-060_farbe.png
#         16_blue-SWNE-060_orient.png
#         17_pink-SENW-330_farbe.png
#         18_pink-SENW-330_orient.png
#         19_pink-SENW-300_farbe.png
#         20_pink-SENW-300_orient.png
#         21_pink-SWNE-030_farbe.png
#         22_pink-SWNE-030_orient.png
#         23_pink-SWNE-060_farbe.png
#         24_pink-SWNE-060_orient.png
#         25_orange-SENW-330_farbe.png
#         26_orange-SENW-330_orient.png
#         27_orange-SENW-300_farbe.png
#         28_orange-SENW-300_orient.png
#         29_orange-SWNE-030_farbe.png
#         30_orange-SWNE-030_orient.png
#         31_orange-SWNE-060_farbe.png
#         32_orange-SWNE-060_orient.png
#     legend PNGs in the stimuli\ folder
#         legend_gbNW.png, legend_poNE.png
#         legend_poNW.png, legend_gbNE.png
#
# version 2.0.0 - 2016, Laura Waite
############################################################################

#
# Reponse Evaluation Variables
#
int resp_cutoff = 700;                 # time window for subject to respond after cue presentation
int resp_count;                        # determines if a response was given for the current trial
int resp_given;                        # response given according to button presses: 1= left, 2=right, 0=miss
int cue_onset;                         # onset time of the cue
int cue_duration = 250;                # duration the cue is presented
int resp_onset;                        # onset time of the response
int RT;                                # reaction time
int feedback_duration;                 # duration of the feedback trial
int correctcounter;                    # number of correct responses
int incorrectcounter;                  # number of errors
int misscounter;                       # number of misses
int perc_incorrect;                    # percent errors
int perc_miss;                         # percent misses
int beep_onset;                        # onset time for beep (1500ms after cue presented)         
int end_resp_window;                   # time the response windows ends

#
# Portcode variables
#
int deg_trg;                           # EEG trigger for the degrees of current stim
int pcode_stim;                        # Stimulus port code
int pcode_cue;                         # Cue port code 

#
# read input file
#
preset string rule ;
preset string version;
string eventfile = "input\\" + rule + "_" + version + ".txt";
input_file events = new input_file;
events.open(eventfile);

array<int> event_num[2000];
array<int> stimuli[2000];    # avail_stims array number
array<int> color[2000];
array<string> direction[2000];
array<int> relevant_feature[2000];
array<int> congruency[2000];
array<int> answer[2000];
array<int> degrees[2000];
array<int> incon_freq[2000];
array<int> color_freq[2000];
array<int> color_answer[2000];
array<int> direc_answer[2000];
array<int> green_answer[2000];
array<int> blue_answer[2000];
array<int> pink_answer[2000];
array<int> orange_answer[2000];
array<int> SENW_answer[2000];
array<int> SWNE_answer[2000];
array<int> jitter[2000];
array<int> block_num[2000];
array<int> total_trials[0];

loop int i=1 until events.end_of_file()
begin
    event_num[i] = events.get_int();           # used only for input file
    stimuli[i] = events.get_int();
    color[i] = events.get_int();               # used only for output file
    direction[i] = events.get_string();        # used only for output file
    relevant_feature[i] = events.get_int();    # used only for output file
    congruency[i] = events.get_int();          # used only for output file
    answer[i] = events.get_int();
    degrees[i] = events.get_int();             # used only for output file
    incon_freq[i] = events.get_int();          # used only for output file
    color_freq[i] = events.get_int();          # used only for output file
    color_answer[i] = events.get_int();        # used only for output file
    direc_answer[i] = events.get_int();        # used only for output file
    green_answer[i] = events.get_int();        # used only for output file
    blue_answer[i] = events.get_int();         # used only for output file
    pink_answer[i] = events.get_int();         # used only for output file
    orange_answer[i] = events.get_int();       # used only for output file
    SENW_answer[i] = events.get_int();         # used only for output file
    SWNE_answer[i] = events.get_int();         # used only for output file
    jitter[i] = events.get_int();
    block_num[i] = events.get_int();
    total_trials.add(i);
    i=i+1;
end;
events.close();

#
# Set-up output file
#
string fdouble = "%10.3f";  # output format double
string fint = "%8d";        # output format int

string subject = logfile.filename();
output_file data = new output_file;
data.open(subject + ".txt");
# (headers) grn_ans  blu_ans  pnk_ans  org_ans  SENW_ans  SWNE_ans  trial  block  incon_freq  color_freq  congrueny   featr  color  color_ans  degrees  direc_ans  answer  stim_onset  cue_onset  resp_cutoff  reation_time  response   accuracy  errors  perc_errors  misses  perc_misses
data.print("grn_ans\tblu_ans\tpnk_ans\torg_ans\tSENW_ans\tSWNE_ans\ttrial\tblock\tincon_freq\tcolor_freq\tcongruency\tfeatr\tcolor\tcolor_ans\tdegrees\tdirec_ans\tanswer\tstim_onset\tcue_onset\tresp_cutoff\treaction_time\tresponse\taccuracy\terrors\tperc_errors\tmisses\tperc_misses\n");

#
# load stimuli pair arrays into a single array
#
array<bitmap> avail_stims[32][0];
avail_stims[1].assign(green_SENW_330_farbe);
avail_stims[2].assign(green_SENW_330_orient);
avail_stims[3].assign(green_SENW_300_farbe);
avail_stims[4].assign(green_SENW_300_orient);
avail_stims[5].assign(green_SWNE_030_farbe);
avail_stims[6].assign(green_SWNE_030_orient);
avail_stims[7].assign(green_SWNE_060_farbe);
avail_stims[8].assign(green_SWNE_060_orient);
avail_stims[9].assign(blue_SENW_330_farbe);
avail_stims[10].assign(blue_SENW_330_orient);
avail_stims[11].assign(blue_SENW_300_farbe);
avail_stims[12].assign(blue_SENW_300_orient);
avail_stims[13].assign(blue_SWNE_030_farbe);
avail_stims[14].assign(blue_SWNE_030_orient);
avail_stims[15].assign(blue_SWNE_060_farbe);
avail_stims[16].assign(blue_SWNE_060_orient);
avail_stims[17].assign(pink_SENW_330_farbe);
avail_stims[18].assign(pink_SENW_330_orient);
avail_stims[19].assign(pink_SENW_300_farbe);
avail_stims[20].assign(pink_SENW_300_orient);
avail_stims[21].assign(pink_SWNE_030_farbe);
avail_stims[22].assign(pink_SWNE_030_orient);
avail_stims[23].assign(pink_SWNE_060_farbe);
avail_stims[24].assign(pink_SWNE_060_orient);
avail_stims[25].assign(orange_SENW_330_farbe);
avail_stims[26].assign(orange_SENW_330_orient);
avail_stims[27].assign(orange_SENW_300_farbe);
avail_stims[28].assign(orange_SENW_300_orient);
avail_stims[29].assign(orange_SWNE_030_farbe);
avail_stims[30].assign(orange_SWNE_030_orient);
avail_stims[31].assign(orange_SWNE_060_farbe);
avail_stims[32].assign(orange_SWNE_060_orient);

#
# load legend pair arrays into a single array
#
array<bitmap> avail_legends[2][0];
avail_legends[1].assign(gbNW_poNE);
avail_legends[2].assign(poNW_gbNE);

#
# declare which legend from avail_legends to be used
#
int which_legend;
if (rule == "gbNW_poNE") then
    which_legend = 1;
elseif (rule == "poNW_gbNE") then
    which_legend = 2;
end;

#
# Main
#
loop int i=1 until i > total_trials.count()
begin
    # pause between blocks
    if (i != 1) then # but don't pause before the first trial
        if (block_num[i] != block_num[i-1]) then
            warn_txt.set_caption("Pause");
            warn_txt.redraw();
            pause.present();
        end;
    end;

    # setup Portcodes
    if (degrees[i] == 330) then
        deg_trg = 3;
    elseif (degrees[i] == 300) then
        deg_trg = 6;
    elseif (degrees[i] == 30) then
        deg_trg = 3;
    elseif (degrees[i] == 60) then
        deg_trg = 6;
    end;

    pcode_stim = (direc_answer[i]*100) + (color[i]*10) + deg_trg;             # portcode for stim
    pcode_cue = (relevant_feature[i]*100) + (congruency[i]*10) + answer[i];   # portcode for cue

    # setup stimulus presentation
    stim.set_part(1, avail_stims[stimuli[i]][1]);              # set stimulus pic
    stim.set_part(2, avail_legends[which_legend][1]);          # set legend pic for stim
    stim.set_part(3, avail_legends[which_legend][2]);
    stim_event.set_port_code(pcode_stim);                      # set portcode for stim
  
    # setup cue presentation
    cue.set_part(1, avail_stims[stimuli[i]][2]);               # set cue pic
    cue.set_part(2, avail_legends[which_legend][1]);           # set legend pic for cue
    cue.set_part(3, avail_legends[which_legend][2]);
    cue_event.set_time(jitter[i]);                             # set jitter before cue onset
    cue_event.set_duration(cue_duration);                      # set cue duration
    cue_event.set_port_code(pcode_cue);                        # set portcode for cue

    # setup wait period
    wait_pic.set_part(1, avail_stims[stimuli[i]][1]);          # set wait pic
    wait_pic.set_part(2, avail_legends[which_legend][1]);      # set legend pic for wait period
    wait_pic.set_part(3, avail_legends[which_legend][2]);
    wait_event.set_time(jitter[i] + cue_duration);             # set wait period onset
    wait_event.set_duration(resp_cutoff);                      # set wait period duration

    main_trial.present();

    # pull stimulus and response data needed for response evaluation
    stimulus_data info_stim = stimulus_manager.get_stimulus_data((i*5)-4);  # get stimulus data for stim
    stimulus_data info_cue = stimulus_manager.get_stimulus_data((i*5)-3);   # get stimulus data for cue
    stimulus_data info_wait = stimulus_manager.get_stimulus_data((i*5)-2);  # get stimulus data for wait period
    resp_count = response_manager.response_count();                         # determine if a response was given 0 = no response; 1 = response
    response_data last_resp = response_manager.last_response_data();        # get stimulus data for response
    resp_given = response_manager.last_response();                          # response given according to button presses: 1= left, 2=right, 0=miss
    cue_onset = info_cue.time();                                            # get cue onset time
    end_resp_window = (cue_onset + resp_cutoff);                            # determine at which time the response windows ends

    # setup feedback presentation
    feedback_pic.set_part(1, avail_stims[stimuli[i]][1]);      # set feedback pic
    feedback_pic.set_part(2, avail_legends[which_legend][1]);  # set legend pic for feedback
    feedback_pic.set_part(3, avail_legends[which_legend][2]);
    
    # give feedback
    if (resp_count == 0) then                                  # miss
        beep_onset = (1500 - resp_cutoff);                     # determine onset time for beep (1500ms after cue presented)
	     beep_event.set_time(beep_onset);                       # set time for beep onset
	     beep_event.set_stimulus(sounds[2]);                    # set beep
        beep_event.set_event_code("beep");                     # set eventcode for beep
        beep_event.set_port_code(3);                           # set portcode for beep
        
        feedback_duration = (beep_onset + 500);                # determine duration for the feedback trial (time of beep onset + 500ms)
        feedback_event.set_duration(feedback_duration);        # set duration for feedback trial
        
    else
	     resp_onset = last_resp.time();                         # get response onset time
        RT = (resp_onset - cue_onset);                         # determine reaction time
	     
	     beep_event.set_time(100);                              # set time for no beep
        beep_event.set_stimulus(sounds[1]);                    # set no beep
        beep_event.set_event_code("no beep");                  # set eventcode for no beep
        beep_event.set_port_code(0);                           # set portcode for no beep
 
        feedback_event.set_duration(500);                      # set duration for feedback trial
    end;
    feedback_trial.present();


    # pull stimulus data for feeback event
    stimulus_data info_feedback = stimulus_manager.get_stimulus_data((i*5)-1);
    # pull stimulus data for beep event
    stimulus_data info_beep = stimulus_manager.get_stimulus_data(i*5);

    # print to output file
    data.print(printf(green_answer[i], fint) + "\t");
    data.print(printf(blue_answer[i], fint) + "\t");
    data.print(printf(pink_answer[i], fint) + "\t");
    data.print(printf(orange_answer[i], fint) + "\t");
    data.print(printf(SENW_answer[i], fint) + "\t");
    data.print(printf(SWNE_answer[i], fint) + "\t");

    data.print(printf(i, fint) + "\t");                        # trial number

    data.print(printf(block_num[i], fint) + "\t");
    data.print(printf(incon_freq[i], fint) + "\t");
    data.print(printf(color_freq[i], fint) + "\t");

    data.print(printf(congruency[i], fint) + "\t");
    data.print(printf(relevant_feature[i], fint) + "\t");

    data.print(printf(color[i], fint) + "\t");
    data.print(printf(color_answer[i], fint) + "\t");

    data.print(printf(degrees[i], fint) + "\t");
    data.print(printf(direc_answer[i], fint) + "\t");

    data.print(printf(answer[i], fint) + "\t");

    data.print(printf(info_stim.time(), fint) + "\t");         # stim onset
    data.print(printf(cue_onset, fint) + "\t");                # cue onset
    data.print(printf(resp_cutoff, fint) + "\t");              # time subject has to respond

    # Reaction Time
    if (resp_count == 0) then  # if no reponse or late response
        data.print("NaN" + "\t");
    else
        data.print(printf(RT, fint) + "\t");
    end;

    # Response
    if (resp_count == 0) then                     # miss
        data.print(printf(0, fint) + "\t");
    else
        if (resp_given == 1) then                 # left
            data.print(printf(1, fint) + "\t");
        elseif (resp_given == 2) then             # right
            data.print(printf(2, fint) + "\t");
        end;
    end;

    # Evaluate Response
    if (resp_count == 0) then
        misscounter = misscounter + 1;
        data.print("NaN" + "\t");
    else
        if (answer[i] == 1) then
            if (resp_given == 1) then
                correctcounter = correctcounter + 1;
                data.print(printf(1, fint) + "\t");
            elseif (resp_given == 2) then
	             incorrectcounter = incorrectcounter + 1;
                data.print(printf(2, fint) + "\t");
            end;
        elseif (answer[i] == 2) then
            if (resp_given == 2) then
                correctcounter = correctcounter + 1;
                data.print(printf(1, fint) + "\t");
            elseif (resp_given == 1) then
                incorrectcounter = incorrectcounter + 1;
                data.print(printf(2, fint) + "\t");
            end;
        end;
    end;

    # determine current error rate
    perc_incorrect = (incorrectcounter * 100) / i;
    data.print(printf(incorrectcounter, fint) + "\t");
    data.print(printf(perc_incorrect, fint) + "\t");

    # determine current miss rate
    perc_miss = (misscounter * 100) / i;
    data.print(printf(misscounter, fint) + "\t");
    data.print(printf(perc_miss, fint) + "\t");

    # set new resp_cutoff according to error rate and miss rate
    if ((perc_incorrect < 10) && (perc_miss < 10) && (resp_cutoff > 350)) then
        resp_cutoff = resp_cutoff - 10;
    elseif ((perc_incorrect > 15) && (resp_cutoff < 1400)) then
        resp_cutoff = resp_cutoff + 10;
    elseif ((perc_miss > 10) && (resp_cutoff < 1400)) then
        resp_cutoff = resp_cutoff + 10;
    end;

    data.print( "\n" );

    i=i+1;
end;

data.close(); # close output file
finish.present();

#### Port Codes: ############################
#
#	Break Trial:	99
#
#-------Stimuli:
#	direction =  left:  1xx	 x determined by color (1-4) and degrees (3 or 6)
#              right:  2xx
#
#	color =     green:  x1x  x determined by direction (1 or 2) and degrees (3 or 6)
#               blue:  x2x
#               pink:  x3x
#             orange:  x4x
#
#  degrees =     330:  xx3  x determined by direction (1 or 2) and color (1-4)
#                300:  xx6
#                 60:  xx6
#                 30:  xx3
#
#-------Cue:
#  relevant feature =  color: 1xx
#                     orient: 2xx
#
#  congruency =    congruent: x1x
#                incongruent: x2x
#
#  answer =             left: xx1
#                      right: xx2
#
#-------Response:
#	Left = 1	
#	Right = 2
#	Miss = 3