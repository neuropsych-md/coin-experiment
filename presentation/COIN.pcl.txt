# COIN (Color Orientation INterference Task)
# --------------------------------------------------------------------------
#
# required files:
#     COIN.pcl
#     events files in the input\ folder
#         gbNW_poNE_1.txt, gbNW_poNE_2.txt
#         poNW_gbNE_1.txt, poNW_gbNE_2.txt
#     stim1 PNGs in the stimuli\ folder
#         green-SENW-330.png, green-SWNE-030.png
#         green-SENW-300.png, green-SWNE-060.png
#         blue-SENW-330.png, blue-SWNE-030.png
#         blue-SENW-300.png, blue-SWNE-060.png
#         pink-SENW-330.png, pink-SWNE-030.png
#         pink-SENW-300.png, pink-SWNE-060.png
#         orange-SENW-330.png, orange-SWNE-030.png
#         orange-SENW-300.png, orange-SWNE-060.png
#     stim2 PNGs in the stimuli\ folder
#         01_green-SENW-330_farbe.png
#         02_green-SENW-330_orient.png
#         03_green-SENW-300_farbe.png
#         04_green-SENW-300_orient.png
#         05_green-SWNE-030_farbe.png
#         06_green-SWNE-030_orient.png
#         07_green-SWNE-060_farbe.png
#         08_green-SWNE-060_orient.png
#         09_blue-SENW-330_farbe.png
#         10_blue-SENW-330_orient.png
#         11_blue-SENW-300_farbe.png
#         12_blue-SENW-300_orient.png
#         13_blue-SWNE-030_farbe.png
#         14_blue-SWNE-030_orient.png
#         15_blue-SWNE-060_farbe.png
#         16_blue-SWNE-060_orient.png
#         17_pink-SENW-330_farbe.png
#         18_pink-SENW-330_orient.png
#         19_pink-SENW-300_farbe.png
#         20_pink-SENW-300_orient.png
#         21_pink-SWNE-030_farbe.png
#         22_pink-SWNE-030_orient.png
#         23_pink-SWNE-060_farbe.png
#         24_pink-SWNE-060_orient.png
#         25_orange-SENW-330_farbe.png
#         26_orange-SENW-330_orient.png
#         27_orange-SENW-300_farbe.png
#         28_orange-SENW-300_orient.png
#         29_orange-SWNE-030_farbe.png
#         30_orange-SWNE-030_orient.png
#         31_orange-SWNE-060_farbe.png
#         32_orange-SWNE-060_orient.png
#     legend PNGs in the stimuli\ folder
#         legend_gbNW.png, legend_poNE.png
#         legend_poNW.png, legend_gbNE.png
#
# version 2.0.0 - 2016, Laura Waite
############################################################################

#
# Variables
#
int block_trl_num = 0;                     # Trial number of the current block
int resp_cutoff = 1400;                    # Duration of stim2
int correctcounter = 0;                    # Number of correct responses in the current block
int incorrectcounter = 0;                  # Number of errors in the current block
int misscounter = 0;                       # Number of misses in the current block
int perc_incorrect = 0;                    # Percent errors in the current block
int perc_miss = 0;                         # Percent misses in the current block

#
# Portcode variables
#
int deg_trg;
int pcode_stim1;
int pcode_stim2;

#
# read input file
#
preset string rule ;
preset string version;
string eventfile = "input\\" + rule + "_" + version + ".txt";
input_file events = new input_file;
events.open(eventfile);

array<int> event_num[2000];
array<int> stimuli[2000];    # avail_stims array number
array<int> color[2000];
array<string> direction[2000];
array<int> relevant_feature[2000];
array<int> congruency[2000];
array<int> answer[2000];
array<int> degrees[2000];
array<int> incon_freq[2000];
array<int> color_freq[2000];
array<int> color_answer[2000];
array<int> direc_answer[2000];
array<int> green_answer[2000];
array<int> blue_answer[2000];
array<int> pink_answer[2000];
array<int> orange_answer[2000];
array<int> SENW_answer[2000];
array<int> SWNE_answer[2000];
array<int> jitter[2000];
array<int> block_num[2000];
array<int> total_trials[0];

loop int i=1 until events.end_of_file()
begin
    event_num[i] = events.get_int();           # used only for input file
    stimuli[i] = events.get_int();
    color[i] = events.get_int();               # used only for output file
    direction[i] = events.get_string();        # used only for output file
    relevant_feature[i] = events.get_int();    # used only for output file
    congruency[i] = events.get_int();          # used only for output file
    answer[i] = events.get_int();
    degrees[i] = events.get_int();             # used only for output file
    incon_freq[i] = events.get_int();          # used only for output file
    color_freq[i] = events.get_int();          # used only for output file
    color_answer[i] = events.get_int();        # used only for output file
    direc_answer[i] = events.get_int();        # used only for output file
    green_answer[i] = events.get_int();        # used only for output file
    blue_answer[i] = events.get_int();         # used only for output file
    pink_answer[i] = events.get_int();         # used only for output file
    orange_answer[i] = events.get_int();       # used only for output file
    SENW_answer[i] = events.get_int();         # used only for output file
    SWNE_answer[i] = events.get_int();         # used only for output file
    jitter[i] = events.get_int();
    block_num[i] = events.get_int();
    total_trials.add(i);
    i=i+1;
end;
events.close();

#
# Set-up output file
#
string fdouble = "%10.3f";  # output format double
string fint = "%8d";        # output format int

string subject = logfile.filename();
output_file data = new output_file;
data.open(subject + ".txt");
# (headers) grn_ans  blu_ans  pnk_ans  org_ans  SENW_ans  SWNE_ans  trial  block  incon_freq  color_freq  congrueny   featr  color  color_ans  degrees  direc_ans  answer  stim1_onset  stim2_onset  reation_time  response   accuracy
data.print("grn_ans\tblu_ans\tpnk_ans\torg_ans\tSENW_ans\tSWNE_ans\ttrial\tblock\tincon_freq\tcolor_freq\tcongruency\tfeatr\tcolor\tcolor_ans\tdegrees\tdirec_ans\tanswer\tstim1_onset\tstim2_onset\treaction_time\tresponse\taccuracy\n");

#
# load stimuli pair arrays into a single array
#
array<bitmap> avail_stims[64][0];
avail_stims[1].assign(green_SENW_330_farbe);
avail_stims[2].assign(green_SENW_330_orient);
avail_stims[3].assign(green_SENW_300_farbe);
avail_stims[4].assign(green_SENW_300_orient);
avail_stims[5].assign(green_SWNE_030_farbe);
avail_stims[6].assign(green_SWNE_030_orient);
avail_stims[7].assign(green_SWNE_060_farbe);
avail_stims[8].assign(green_SWNE_060_orient);
avail_stims[9].assign(blue_SENW_330_farbe);
avail_stims[10].assign(blue_SENW_330_orient);
avail_stims[11].assign(blue_SENW_300_farbe);
avail_stims[12].assign(blue_SENW_300_orient);
avail_stims[13].assign(blue_SWNE_030_farbe);
avail_stims[14].assign(blue_SWNE_030_orient);
avail_stims[15].assign(blue_SWNE_060_farbe);
avail_stims[16].assign(blue_SWNE_060_orient);
avail_stims[17].assign(pink_SENW_330_farbe);
avail_stims[18].assign(pink_SENW_330_orient);
avail_stims[19].assign(pink_SENW_300_farbe);
avail_stims[20].assign(pink_SENW_300_orient);
avail_stims[21].assign(pink_SWNE_030_farbe);
avail_stims[22].assign(pink_SWNE_030_orient);
avail_stims[23].assign(pink_SWNE_060_farbe);
avail_stims[24].assign(pink_SWNE_060_orient);
avail_stims[25].assign(orange_SENW_330_farbe);
avail_stims[26].assign(orange_SENW_330_orient);
avail_stims[27].assign(orange_SENW_300_farbe);
avail_stims[28].assign(orange_SENW_300_orient);
avail_stims[29].assign(orange_SWNE_030_farbe);
avail_stims[30].assign(orange_SWNE_030_orient);
avail_stims[31].assign(orange_SWNE_060_farbe);
avail_stims[32].assign(orange_SWNE_060_orient);

#
# load legend pair arrays into a single array
#
array<bitmap> avail_legends[4][0];
avail_legends[1].assign(gbNW_poNE);
avail_legends[2].assign(poNW_gbNE);

#
# declare which legend from avail_legends to be used
#
int which_legend;
if (rule == "gbNW_poNE") then
    which_legend = 1;
elseif (rule == "poNW_gbNE") then
    which_legend = 2;
end;

#
# Main
#
loop int i=1 until i > total_trials.count()
begin
    # pause between blocks
    if (i != 1) then # but don't pause before the first trial
        if (block_num[i] != block_num[i-1]) then
            if (misscounter > 10) || (incorrectcounter < 10) then
                warn_txt.set_caption("Pause\n" + "Bitte schneller drücken!");
            else
                warn_txt.set_caption("Pause");
            end;
            warn_txt.redraw();
            pause.present();
            misscounter = 0;
            incorrectcounter = 0;
            correctcounter = 0;
        end;
    end;

    #Setup Portcodes
    if (degrees[i] == 330) then
        deg_trg = 3;
    elseif (degrees[i] == 300) then
        deg_trg = 6;
    elseif (degrees[i] == 30) then
        deg_trg = 3;
    elseif (degrees[i] == 60) then
        deg_trg = 6;
    end;

    pcode_stim1 = (direction[i]*100) + (color[i]*10) + deg_trg;
    pcode_stim2 = (relevant_feature[i]*100) + (congruency[i]*10) + answer[i];
    term.print(printf(pcode_stim1, fint) + "\n");
    term.print(printf(pcode_stim2, fint) + "\n");

    # set event code for stim1
    # stim_event1.set_event_code(avail_stims[stimuli[i]][1].description());
    # set stimulus for stim1
    stim1.set_part(1, avail_stims[stimuli[i]][1]);
    # set legend for stim1
    stim1.set_part(2, avail_legends[which_legend][1]);
    stim1.set_part(3, avail_legends[which_legend][2]);
    # set portcode for stim1
    stim_event1.set_port_code(pcode_stim1);

    # set event code for stim2
    # stim_event2.set_event_code(avail_stims[stimuli[i]][2].description());
    # set stimulus for stim2
    stim2.set_part(1, avail_stims[stimuli[i]][2]);
    # set legend for stim1
    stim2.set_part(2, avail_legends[which_legend][1]);
    stim2.set_part(3, avail_legends[which_legend][2]);
    # set jitter before stim2 onset
    stim_event2.set_time(jitter[i]);
    # set duration of stim2
    stim_event2.set_duration(resp_cutoff);
    # set portcode stim2
    stim_event2.set_port_code(pcode_stim2);

    main_trial.present();

    # pull stimulus data for stim1
    stimulus_data timing_stim1 = stimulus_manager.get_stimulus_data((i*4)-3);
    # pull stimulus data for stim2
    stimulus_data info_stim2 = stimulus_manager.get_stimulus_data((i*4)-2);

    # give feedback
    feedback_pic.set_part(1, avail_stims[stimuli[i]][1]);
    if (info_stim2.button() == 0) then
        beep_event.set_stimulus(sounds[2]);
    else
        beep_event.set_stimulus(sounds[1]);
    end;
    feedback_trial.present();

    # pull stimulus data for wait event
    stimulus_data info_stim3 = stimulus_manager.get_stimulus_data((i*4)-1);

    # pull stimulus data for beep event
    stimulus_data info_sound = stimulus_manager.get_stimulus_data(i*4);

    # print to output file
    data.print(printf(green_answer[i], fint) + "\t");
    data.print(printf(blue_answer[i], fint) + "\t");
    data.print(printf(pink_answer[i], fint) + "\t");
    data.print(printf(orange_answer[i], fint) + "\t");
    data.print(printf(SENW_answer[i], fint) + "\t");
    data.print(printf(SWNE_answer[i], fint) + "\t");

    data.print(printf(i, fint) + "\t");                     # trial number

    data.print(printf(block_num[i], fint) + "\t");
    data.print(printf(incon_freq[i], fint) + "\t");
    data.print(printf(color_freq[i], fint) + "\t");

    data.print(printf(congruency[i], fint) + "\t");
    data.print(printf(relevant_feature[i], fint) + "\t");

    data.print(printf(color[i], fint) + "\t");
    data.print(printf(color_answer[i], fint) + "\t");

    data.print(printf(degrees[i], fint) + "\t");
    data.print(printf(direc_answer[i], fint) + "\t");

    data.print(printf(answer[i], fint) + "\t");

    data.print(printf(timing_stim1.time(), fint) + "\t");   # stim1 onset
    data.print(printf(info_stim2.time(), fint) + "\t");     # stim2 onset

    # Reaction Time
    if (info_stim2.button() == 0) then    # if no reponse or late reponse
        data.print("NaN" + "\t");
    else
        data.print(printf(info_stim2.reaction_time(), fint) + "\t");
    end;

    # Response
    if (info_stim2.button() == 1) then
        data.print(printf(-1, fint) + "\t");
    elseif(info_stim2.button() == 2) then
        data.print(printf(1, fint) + "\t");
    elseif(info_stim2.button() == 0) then
        data.print(printf(0, fint) + "\t");
    end;

    # Evaluate Response
    if (answer[i] == -1) then
        if (info_stim2.button() == 1) then
            correctcounter = correctcounter + 1;
            data.print(printf(1, fint) + "\t");
        elseif(info_stim2.button() == 0) then
            misscounter = misscounter + 1;
            data.print("NaN" + "\t");
        else
            incorrectcounter = incorrectcounter + 1;
            data.print(printf(-1, fint) + "\t");
        end;
    elseif (answer[i] == 1) then
        if (info_stim2.button() == 2) then
            correctcounter = correctcounter + 1;
            data.print(printf(1, fint) + "\t");
        elseif(info_stim2.button() == 0) then
            misscounter = misscounter + 1;
            data.print("NaN" + "\t");
        else
            incorrectcounter = incorrectcounter + 1;
            data.print(printf(-1, fint) + "\t");
        end;
    end;

    block_trl_num = block_trl_num +1;

    perc_incorrect = (incorrectcounter * 100) / block_trl_num;
    perc_miss = (misscounter * 100) / block_trl_num;

    if ((perc_incorrect < 10) && (resp_cutoff > 249)) then
        resp_cutoff = resp_cutoff - 10;
    elseif ((perc_incorrect > 15) && (resp_cutoff < 1400)) then
        resp_cutoff = resp_cutoff + 10;
    end;

    if ((perc_miss > 10) && (resp_cutoff < 1400)) then
        resp_cutoff = resp_cutoff + 10;
    end;

    term.print("\n" + "resp_cutoff=" + string(resp_cutoff));
    term.print("\n" + "incorrect_counter=" + string(incorrectcounter));
    term.print("\n" + "correct_counter=" + string(correctcounter));
    term.print("\n" + "miss_counter=" + string(misscounter));
    term.print("\n" + "block_trl_num=" + string(block_trl_num));
    term.print("\n" + "perc_incorrect=" + string(perc_incorrect));
    term.print("\n" + "perc_miss=" + string(perc_miss));

    data.print( "\n" );

    i=i+1;
end;

data.close(); # close output file
finish.present();
