Stimuli
-------

There are 48 unique stimuli: 16 core-stimuli and 32 cue-stimuli. Each stimulus
is 640x640 pixels.

The core-stimuli consists of a colored circle on a black background. The colored
circle is overlaid by black hatching and contains a white fixation point in the
center. The colored circle is 1 of 4 isoluminant colors. The isoluminant colors
used are: blue(RGB:123, 178, 208), orange(RGB:205, 162, 119), pink(RGB:211, 146,
178), and green(RGB:143, 191, 53). The black hatching is oriented vertically and
then tilted 30° or 60° to the left or 30° or 60° to the right.

The cue-stimuli are the same as the core-stimuli, but also have a cue that is
located in the center of the colored circle. The cue indicates to the subject
which stimulus feature is relevant for the response. The cue is a small black
circle with a white letter "F" or "O" in the center. The "F" stands for "Farbe"
(color) and the "O" stands for "Orient" (direction), which are the two possible
relevant features of the stimuli that the subject needs to pay attention to. The
currently relevant stimulus feature can map to the same or the opposite response
as the irrelevant feature, thereby creating congruent and incongruent stimuli. A
stimuli is congruent if the currently relevant stimulus feature's answer is the
same as the irrelevant feature's answer.

Legend
------
A legend, which is located at the bottom of the screen underneath the stimulus
in each trial, is used to inform the subject what the rules are. While the
rule-set varies from subject to subject, it does /not/ change within a given
experiment-run. The rules indicate which of the 4 possible responses (left1,
left2, right1, or right2) is associated with each of the colors, degrees of the
tilted hatching, and whether the top or the bottom of the hatching indicates the
direction.

TODO: add section for answer mapping with fingers

Generation of Stimuli & Legend
------------------------------
Inkscape was used to create the stimuli(COIN_stims.sgv) and the
legend(COIN_legend.svg) svg files. The svgs for the stimuli and legend both
have several layers which contain the unique features of the stimuli (color,
hatching, etc). Each of these layers can be individually enabled and disabled to
create all needed variations of the stimuli and legends.

svgtune is used to enable and disable the layers of the svg to create
the variations of the stimuli and legend. For more information about svgtune,
see: https://github.com/yarikoptic/svgtune/

TODO: explain that the .svgtune files are (aptly) written in an svgtune format.
And thus refer to that project. Though, don't imply that only the format is
used; the actually utility is used as well.
TODO: make sure svgtune is listed in your dependencies list (utilities used, or
whatever)

To generate the pngs, use the following script:
pngs-gen.sh <filename>.svgtune
    ex: pngs-gen.sh MiSIT_stims.svgtune
    ex: pngs-gen.sh MiSIT_legend.svgtune

Naming Scheme
-------------
core-stimuli: <color>-<direction>-<degrees>
  ex: green-SENW-330
      green-SENW-300
      green-SWNE-030
      green-SWNE-060

cue-stimuli: <index>_<color>-<direction>-<degrees>_<relevant feature>-<cue location>
  ex: 01_green-SENW-330_farbe
      02_green-SENW-330_orient
      03_green-SENW-300_farbe
      04_green-SENW-300_orient

rules: <color><color><direction>_<color><color><direction>
  ex: gpNW_boNE green, pink, and hatching tilted north-west
                blue, orange, and hatching tilted north-east

      boNW_gpNE blue, orange, and hatching tilted north-west
                green, pink, and hatching tilted north-east

legend: legend_<color><degrees>
  ex: legend_g300 (the color green and 300° map together to left2)
      legend_p330 (the color pink and 330° map together to left1)
      legend_b30  (the color blue and 30° map together to right1)
      legend_o60  (the color orange and 60° map together to right2)

********************************************************************************
* index: 01-32
*
* color: green = g
*        blue = b
*        pink = p
*        orange = o
*
* hatching direction: SENW, SWNE
* N = top
* S = bottom
* E = right
* W = left
*
* The points of a compass are used to describe the direction. "S"/South (bottom)
* and "N"/North (top) are used to distinguish between the top and bottom of the
* circle. "W"/West (left) and "E"/East (right) are used to distinguish between
* the left and right of the circle. The rules will indicate if the subject
* should pay attention to the top (NW & NE) or the bottom (SW & SE) of the
* circle to determine if the hatching is tilted to the right (east) or to the
* left (west).
*
# TODO: explain that the different angles is merely just to further confuse the
# subject. There's no different between 030 and 060. They're the same, but
# visually look different, which is precicely the point.
*
* degrees: 030 = hatching tilted 30° to the right
*          060 = hatching tilted 60° to the right
*          330 = hatching tilted 30° to the left
*          300 = hatching tilted 60° to the left
*
* relevant feature: farbe = color
*                   orient = direction
*
* cue location: left, right
********************************************************************************

Randomization and Generation of Input files
###########################################
Tools used: results-gen.sh
            jitter-gen.sh
            events-gen.sh
            conan
            join
            sed

#TODO: write a "shit used" section, saying that presentation is used for the
experiment, png shit for pngs, etc, etc

#TODO: enhance png-gen script to check for both svgtune and inkscape and fail if
they don't exist in path.
# TODO: also add a check for conan in results gen. Be clear where/how to get
# conan. Do not imply it is a widely available program like the above two.

results-gen.sh is the top-level script used to generate the input files for
Presentation. See results-gen.sh --help for more info.

Conan is used to complete the randomization. Although conan isn't the most
convenient tool, it works well enough for us and provides reliable results. To
better understand conan and its... peculiarities, refer to its man page.

Conan cfg files
---------------
There are 6 different cfg files: one for each of the different block types
(neutral, congruent, incongruent, farbe, and orient) and one for the jitter. The
randomization constraints for each cfg file are as follows:

neutral:     no direct repeats of the same stimulus
             max of 4 repeats for stimuli with the same response
             no direct repeats of stimuli with the same degrees
             max of 5 repeats for stimuli with the same relevant feature
             max of 4 repeats for stimuli with the same congruency

congruent/   no direct repeats of the same stimulus
incongruent: max of 4 repeats for stimuli with the same response
             no direct repeats of stimuli with the same degrees
             max of 5 repeats for stimuli with the same relevant feature

farbe/orient: no direct repeats of the same stimulus
             max of 4 repeats for stimuli with the same response
             no direct repeats of stimuli with the same degrees
             max of 4 repeats for stimuli with the same congruency

jitter:      max of 4 repeats of the same duration (in ms) of the core-stimuli

TODO: explain jitter in detail somewhere

Conan set files
---------------
jitter-gen.sh generates 1 conan set file for the jitters.
  See jitter-gen.sh --help for more info.

events-gen.sh generates 40 unique conan set files for the events. The 40 event
set files consist of a unique file for each block across each rule-set. In the
current experiment, there are 4 different rule-sets and 5 blocks types that are
each repeated once for a total of 10 blocks. Each of the 5 block types has a
different ratio of incongruent vs congruent and farbe vs orient trials. Below is
a breakdown of the ratios for each block type:

             incongruent vs congruent        farbe vs orient
             ------------------------        --------------
neutral:               50/50                      50/50
congruent:             25/75                      50/50
incongruent:           75/25                      50/50
farbe:                 50/50                      75/50
orient:                50/50                      25/75

See events-gen.sh --help for more info.

Overview of Workflow
####################

Execute:
* pngs-gen.sh MiSIT_layers.svgtune
* pngs-gen.sh MiSIT_legend.svgtune
* results-gen.sh --directory --pngs

#TODO: make results-gen line actually correct
